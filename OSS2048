//
// 2048.c
//
// Copyright (c) 2014 Ben Kogan <http://benkogan.com>
// Gameplay based on 2048 by Gabriele Cirulli <http://gabrielecirulli.com>
//
#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <signal.h>

#define GOAL 2048
#define SIZE 4
/*
 * boardLt is the canonical board; every other board reflects boardLt in its
 * respective direction.
 */
static int *(boardLt[SIZE][SIZE]), // left (canonical)
           *(boardRt[SIZE][SIZE]), // right
           *(boardUp[SIZE][SIZE]), // up
           *(boardDn[SIZE][SIZE]), // down
           *lastAdd = 0, // address of last tile added
            score   = 0,
            win     = false;

static const int QUIT = -1,
                 LOSE =  0,
                 WIN  =  1;
/*
 * Free boards using boardLt.
 */

void
cleanup() {
    for (int r = 0; r < SIZE; r++) {
        for (int c = 0; c < SIZE; c++) {
            free(boardLt[r][c]);
        }
    }
}
/*
 * Print outcome and exit gracefully.
 */
int
quit(int op) {
    char *msg = op == 1 ? "YOU WIN!": op == 0 ? "GAME OVER." : "QUIT";

    printf("\n\n%s\n", msg);
    cleanup();
    exit(0);
}

/*
 * Signal handler function for SIGINT.
 */

void
terminate(int signum) {
    quit(QUIT);
}

/*
 * Exit with message on error.
 */

static void
die(const char *message) {
    perror(message);
    exit(1);
}

/*
 * Set up boards.
 */

void
initBoard() {
    for (int r = 0; r < SIZE; r++) { // row for canonical board
        for (int c = 0; c < SIZE; c++) { // column for canonical board
            int *tile = (int *) malloc(sizeof(int));
            if (tile == NULL) die("malloc returned NULL");
            *tile = 0;

            // add tile to equivalent location in all directional boards
            boardLt[r][c]        = tile;
            boardRt[r][SIZE-1-c] = boardLt[r][c];
            boardUp[SIZE-1-c][r] = boardLt[r][c];
            boardDn[c][SIZE-1-r] = boardLt[r][c];
        }
    }
}

/*
 * Print the specified board.
 */

void
printBoard(int *board[SIZE][SIZE]) {
    printf("\n2048\n\nSCORE: %d\n\n", score);
    for (int r = 0; r < SIZE; r++) {
        for (int c = 0; c < SIZE; c++) {
            if (*board[r][c]) {
                if (lastAdd == board[r][c])
                    printf("\033[036m%6d\033[0m", *board[r][c]); // with color
                else
                    printf("%6d", *board[r][c]);
            } else {
                printf("%6s", ".");
            }
        }
        printf("\n\n");
    }

    printf("\nMOVEMENT:\n   w\n a s d              ");
}

/*
 * Add tile to random open space on board.
 * Tile is a 2 or a 4, randomly chosen.
 */ 
//분석 시작한 부분
void
addRandom() {
   int r, c;
   do { // r과 c는 자리를 랜덤하게 지정해주는판이다
      r = rand() % 4; // 4x4이기때문에 0~3까지 랜덤하게 나오게하고(자리설정)
      c = rand() % 4;//이미 숫자가 있는곳에 들어가면 안되므로
   } while (*boardLt[r][c] != 0);   // while에 조건을 만들어준다.
   int two_or_four = 2 * (rand() % 2) + 2;//2,4 둘 중 하나 랜덤숫자를 만들어준다.
   *boardLt[r][c] = two_or_four; // 그 곳에 숫자를 넣어준다.
   lastAdd = boardLt[r][c]; //방금 추가 된 숫자에 컬러를 넣어주기 위해
} 
bool
slide(int *b[SIZE][SIZE]) {
   bool success = 0; 
   int marker = -1; 

   for (int r = 0; r < SIZE; r++) { // 가로 줄 확인(때에 따라 다름)
      for (int c = 1; c < SIZE; c++) { //세로 줄 확인 (때에 따라 다름)
         if (!(*b[r][c])) continue; // 여기서 c가 1인 이유는 움직일 방향을 기준으로 그 쪽은 확인할 필요가 없기때문이다.
       // 오른쪽으로 움직이려는데 맨 오른쪽은 검사할 필요가 없다.
         // 마찬가지로 위쪽 이동하려는데 위쪽은 확인 할 필요없이 아래쪽 3군데만 검사하면 된다.
         // b[r][c] 확인 하는 곳이 0이라면 굳이 확인하지 않고 다음을(가로,세로) 확인한다.
         int newc = c;// 새로운 기준점 newc를 c라고 설정한다.
         while (newc && (!*b[r][newc - 1] || *b[r][newc - 1] == *b[r][c])) {
            newc--;  // 이 조건은 newc를 확인하는데 만약 0 혹은 똑같은 숫자가 나온다면
            if (*b[r][newc] == *b[r][c] || marker == newc) break;  // 그 숫자랑 방향에 있는
         }// 숫자랑 더해야 하기 때문에 그렇지 않으면 계속해서 newc를 빼주면서 그 방향으로 계속 가려는 것이다.
         // newc를 하나씩 빼가면서 검사를 하던 도중 마커를 만나거나 똑같은 값을 만나게 된다 멈추게한다. 
         if (newc != c) { // 이제 멈춘 newc 지점에서 더해야 하는 조건문
            if (*b[r][newc]) { // 새로운 지점이 0이 아니면 ( 더해야하는곳에서 0이 아니라면 )
               score += *b[r][newc] += *b[r][c]; // 스코어에 더해야 하는것이고 (2 0 0 2 )-> ( 0 0 0 4 ) 면 스코어에 4를 더해준다 
               marker = newc + 1; // 마커는 내가 0 4 4 16 -> 0 0 8 16 으로 바뀌면 8이후부터는 볼 필요가 없다는 뜻이다.
               if (*b[r][newc] == GOAL) win = true; //만약 제일 큰숫자가 2048이 된다면 승리
            }
            else { // 최종 지점에서 더 해야할때 0이라면 그냥 숫자만 더 해준다. (score 변화 없음)
               *b[r][newc] += *b[r][c]; // 0 0 2 0 --> 0 0 0 2 로 가게되면 스코어는 없고 최종 newc자리에만 추가한다.
            }
           *b[r][c] = 0; // 원래있던 자리에 숫자는 0이되어 사라진다.
            success = true;  
         }
      }
      marker = -1; //계속해서 마커를 -1로 하는 이유는 마지막까지 다 검사해야 하기 때문이다.
   } // marker가 계속해서 바뀌므로 초기화 하는 느낌임 매 행마다 바뀔수 있기 때문
   return success; //움직인 값이 있으면 true 반환
}
//분석 끝난 부분
int
move() {
    bool success = false;

    char direction = getchar();
    switch(direction) {
        case 119:      // 'w' key; up
            success = slide(boardUp);
            break;
        case 97:       // 'a' key; left
            success = slide(boardLt);
            break;
        case 115:       // 's' key; down
            success = slide(boardDn);
            break;
        case 100:       // 'd' key; right
            success = slide(boardRt);
            break;
        case 113:       // 'q' key; quit
            quit(QUIT);
            break;
 //     default:
 //         success = false;
    }
    return success;
}
/*
 * Check for possible moves.
 *
 * Return: true if no moves are possible
 *         false if a move exists
 */

bool
isFull() {
    for (int r = SIZE-1; r >= 0; r--) {
        for (int c = SIZE-1; c >= 0; c--) {

            // check tile above where there is a row above
            if (r &&
                    (*boardLt[r-1][c] == 0 ||
                     *boardLt[r-1][c] == *boardLt[r][c]))
                return false;

            // check tile to left where there is a column to the left
            if (c &&
                    (*boardLt[r][c-1] == 0 ||
                     *boardLt[r][c-1] == *boardLt[r][c]))
                return false;
        }
    }
    return true; // no possible moves found
}
/*
 * Main.
 */
int
main(int argc, char **argv){
    srand((unsigned)time(NULL));         // seed random number
    signal(SIGINT, terminate); // set up signal to handle ctrl-c
    system("stty cbreak");     // read user input immediately
    initBoard();
    addRandom();

    for (;;) {
		/*
         printf("\e[1;1H\e[2J"); // clear screen 역할을 하지 못하여 수정 (수정 전)
		 */
		system("cls"); // clear screen (수정 후)
        addRandom();
        printBoard(boardLt);
        if (isFull()) break;
        if (win) quit(WIN);
        while(!move())
            ;
    }
    quit(LOSE); // game over
    cleanup();  // not reached
    return 0;
}
